<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Calculator</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <h1>Calculate Your Chances of Admission</h1>
  <a href="/">Home</a>

  <div>
    <label for="university_select">Choose a University:</label>
    <select name="university_id" id="university_select">
      <option value="">--Please choose an option--</option>
      <option value="4">University of Toronto</option>
      <option value="1">University of Waterloo</option>
      <option value="2">Western University</option>
      <option value="3">Queens University</option>
    </select>
  </div>

  <div>
    <label for="major_select">Choose a Major:</label>
    <select name="major_id" id="major_select">
      <option value="">--Please choose a university first--</option>
    </select>
  </div>

  <canvas id="averagesChart" width="600" height="400" style="margin-top: 30px;"></canvas>

  <br>
  <div>
    <label for="user_average">Enter Your Average:</label>
    <input type="text" id="user_average" name="user_average"> 
  </div>
  <button type="button" id="check_chances_btn">Check Chances</button>
  <p id="result"></p>
  <p id="notes" style="color:gray;"></p>

  <script>
    const majorsByUniversity = {
      1: [
        { id: 1, name: "Chemical Engineering" },
        { id: 2, name: "Mechanical Engineering" },
        { id: 3, name: "Civil Engineering" },
        { id: 4, name: "Electrical Engineering" },
        { id: 5, name: "Computer Engineering" },
        { id: 10, name: "Computer Science" },
        { id: 13, name: "Architectural Engineering - Waterloo" },
        { id: 14, name: "Biomedical Engineering - Waterloo" },
        { id: 15, name: "Geological Engineering - Waterloo" },
        { id: 16, name: "Environmental Engineering - Waterloo" },
        { id: 17, name: "Management Engineering - Waterloo" },
        { id: 18, name: "Mechatronics Engineering - Waterloo" },
        { id: 19, name: "Nanotechnology Engineering - Waterloo" },
        { id: 20, name: "Software Engineering - Waterloo" },
        { id: 21, name: "System Design Engineering - Waterloo" },
        { id: 22, name: "Math + Business Administration - Waterloo" },
        { id: 23, name: "Computer Science + Business Administration - Waterloo" },
        { id: 24, name: "Math - Waterloo" },
        { id: 25, name: "Computing + Financial Management - Waterloo" },
        { id: 26, name: "Math/FARM - Waterloo" }
      ],
      2: [
        { id: 10, name: "Computer Science" },
        { id: 27, name: "Health Sciences" },
        { id: 28, name: "Medical Sciences" },
        { id: 29, name: "Management + Organizational Studies" },
        { id: 30, name: "Ivey Business" },
        { id: 32, name: "General Engineering" }
      ],
      3: [
        { id: 27, name: "Health Sciences" },
        { id: 31, name: "Commerce" },
        { id: 32, name: "General Engineering" }
      ],
      4: [
        { id: 1, name: "Chemical Engineering" },
        { id: 2, name: "Mechanical Engineering" },
        { id: 3, name: "Civil Engineering" },
        { id: 4, name: "Electrical Engineering" },
        { id: 5, name: "Computer Engineering" },
        { id: 6, name: "Engineering Science" },
        { id: 33, name: "TrackOne Engineering" },
        { id: 7, name: "Industrial Engineering" },
        { id: 8, name: "Materials Engineering" },
        { id: 9, name: "Mineral Engineering" },
        { id: 10, name: "Computer Science" },
        { id: 11, name: "Life Science" },
        { id: 12, name: "Rotman Commerce" }
      ]
    };

    const universitySelect = document.getElementById('university_select');
    const majorSelect = document.getElementById('major_select');

    const ctx = document.getElementById('averagesChart').getContext('2d');
    const labels = ['Sample1', 'Sample2', 'Sample3', 'Sample4', 'Sample5', 'Sample6', 'Sample7', 'Sample8', 'Sample9', 'Sample10', 'Sample11'];

    let averagesChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels,
        datasets: [{
          label: 'Admission Averages',
          data: new Array(labels.length).fill(0),
          backgroundColor: 'rgba(54, 162, 235, 0.6)',
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            max: 100
          }
        }
      }
    });

    universitySelect.addEventListener('change', () => {
      const universityId = universitySelect.value;
      majorSelect.innerHTML = '<option value="">--Please choose an option--</option>';

      if (majorsByUniversity[universityId]) {
        majorsByUniversity[universityId].forEach(major => {
          const option = document.createElement('option');
          option.value = major.id;
          option.textContent = major.name;
          majorSelect.appendChild(option);
        });
      }

      averagesChart.data.datasets[0].data = new Array(labels.length).fill(0);
      averagesChart.update();
    });

    majorSelect.addEventListener('change', () => {
      const universityId = universitySelect.value;
      const majorId = majorSelect.value;

      if (!universityId || !majorId) return;

      updateChart(universityId, majorId);
    });

    let currentProgramMean = null;
    let currentProgramNotes = null;

    async function updateChart(universityId, majorId) {
      try {
        const response = await fetch(`/averages/${universityId}/${majorId}`);
        if (!response.ok) {
          throw new Error('Network error');
        }

        const data = await response.json();

        const averages = [
          data.avg1 || 0, data.avg2 || 0, data.avg3 || 0, data.avg4 || 0,
          data.avg5 || 0, data.avg6 || 0, data.avg7 || 0, data.avg8 || 0,
          data.avg9 || 0, data.avg10 || 0, data.avg11 || 0
        ];

        averagesChart.data.datasets[0].data = averages;
        averagesChart.update();

        const sum = averages.reduce((acc, val) => acc + val, 0);
        currentProgramMean = sum / averages.length;

        currentProgramNotes = data.notes;

      } catch (error) {
        console.error('Error fetching averages:', error);
        averagesChart.data.datasets[0].data = new Array(labels.length).fill(0);
        averagesChart.update();
        currentProgramMean = null;
        currentProgramNotes = null;
      }
    }

  document.getElementById('check_chances_btn').addEventListener('click', () => {
    const userAverage = parseFloat(document.getElementById('user_average').value);
    const resultElement = document.getElementById('result');
    const notesElement = document.getElementById('notes');

    if (!currentProgramMean) {
      resultElement.textContent = "Please select a university and major first.";
      notesElement.textContent = "";
      return;
    }

    if (isNaN(userAverage)) {
      resultElement.textContent = "Please enter a valid number for your average.";
      notesElement.textContent = "";
      return;
    }

    if (userAverage >= currentProgramMean) {
      resultElement.textContent = `You have a good chance! Program mean is ${currentProgramMean.toFixed(2)}%.`;
    } else {
      resultElement.textContent = `It might be competitive. Program mean is ${currentProgramMean.toFixed(2)}%.`;
    }

    // Show notes if not "N/A"
    if (currentProgramNotes && currentProgramNotes !== "N/A") {
      notesElement.textContent = `Note: ${currentProgramNotes}`;
    } else {
      notesElement.textContent = "";
    }
  });
  </script>
</body>
</html>
